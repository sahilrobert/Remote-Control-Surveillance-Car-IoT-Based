// Define motor control pins for L298N motor driver
#define ENA 14  // Enable pin for Right Motor (PWM)
#define ENB 12  // Enable pin for Left Motor (PWM)
#define IN_1 15 // IN1 - controls direction of Right Motor
#define IN_2 13 // IN2 - controls direction of Right Motor
#define IN_3 2  // IN3 - controls direction of Left Motor
#define IN_4 0  // IN4 - controls direction of Left Motor

// Include necessary libraries for WiFi and web server
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>

// Global variables
String command;           // Stores incoming command from the web interface
int speedCar = 800;       // Default speed (range: 400 to 1023)
int speed_Coeff = 3;      // Speed reduction factor for turning

const char* ssid = "NodeMCU Car";  // Name of WiFi access point
ESP8266WebServer server(80);      // Create web server on port 80

void setup() {
  // Set motor control pins as output
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN_1, OUTPUT);
  pinMode(IN_2, OUTPUT);
  pinMode(IN_3, OUTPUT);
  pinMode(IN_4, OUTPUT);

  // Start Serial communication for debugging
  Serial.begin(115200);

  // Configure NodeMCU as a WiFi Access Point
  WiFi.mode(WIFI_AP);
  WiFi.softAP(ssid);  // Create AP with specified SSID

  Serial.print("AP IP address: ");
  Serial.println(WiFi.softAPIP());  // Print IP address of AP

  // Setup server endpoints
  server.on("/", HTTP_handleRoot);         // Handle root URL
  server.onNotFound(HTTP_handleRoot);      // Handle unknown URLs
  server.begin();                          // Start web server
}

// Move car forward
void goAhead() {
  digitalWrite(IN_1, LOW);  digitalWrite(IN_2, HIGH);  analogWrite(ENA, speedCar);  // Right motor forward
  digitalWrite(IN_3, LOW);  digitalWrite(IN_4, HIGH);  analogWrite(ENB, speedCar);  // Left motor forward
}

// Move car backward
void goBack() {
  digitalWrite(IN_1, HIGH); digitalWrite(IN_2, LOW);   analogWrite(ENA, speedCar);
  digitalWrite(IN_3, HIGH); digitalWrite(IN_4, LOW);   analogWrite(ENB, speedCar);
}

// Turn car right
void goRight() {
  digitalWrite(IN_1, HIGH); digitalWrite(IN_2, LOW);   analogWrite(ENA, speedCar);
  digitalWrite(IN_3, LOW);  digitalWrite(IN_4, HIGH);  analogWrite(ENB, speedCar);
}

// Turn car left
void goLeft() {
  digitalWrite(IN_1, LOW);  digitalWrite(IN_2, HIGH);  analogWrite(ENA, speedCar);
  digitalWrite(IN_3, HIGH); digitalWrite(IN_4, LOW);   analogWrite(ENB, speedCar);
}

// Slight right while moving forward
void goAheadRight() {
  digitalWrite(IN_1, LOW);  digitalWrite(IN_2, HIGH);  analogWrite(ENA, speedCar / speed_Coeff);
  digitalWrite(IN_3, LOW);  digitalWrite(IN_4, HIGH);  analogWrite(ENB, speedCar);
}

// Slight left while moving forward
void goAheadLeft() {
  digitalWrite(IN_1, LOW);  digitalWrite(IN_2, HIGH);  analogWrite(ENA, speedCar);
  digitalWrite(IN_3, LOW);  digitalWrite(IN_4, HIGH);  analogWrite(ENB, speedCar / speed_Coeff);
}

// Slight right while moving backward
void goBackRight() {
  digitalWrite(IN_1, HIGH); digitalWrite(IN_2, LOW);   analogWrite(ENA, speedCar / speed_Coeff);
  digitalWrite(IN_3, HIGH); digitalWrite(IN_4, LOW);   analogWrite(ENB, speedCar);
}

// Slight left while moving backward
void goBackLeft() {
  digitalWrite(IN_1, HIGH); digitalWrite(IN_2, LOW);   analogWrite(ENA, speedCar);
  digitalWrite(IN_3, HIGH); digitalWrite(IN_4, LOW);   analogWrite(ENB, speedCar / speed_Coeff);
}

// Stop the car
void stopRobot() {
  digitalWrite(IN_1, LOW); digitalWrite(IN_2, LOW); analogWrite(ENA, speedCar);
  digitalWrite(IN_3, LOW); digitalWrite(IN_4, LOW); analogWrite(ENB, speedCar);
}

void loop() {
  server.handleClient();  // Handle incoming web requests

  command = server.arg("State");  // Get the command sent via the "State" parameter

  // Compare command and perform corresponding action
  if (command == "F") goAhead();
  else if (command == "B") goBack();
  else if (command == "L") goLeft();
  else if (command == "R") goRight();
  else if (command == "I") goAheadRight();
  else if (command == "G") goAheadLeft();
  else if (command == "J") goBackRight();
  else if (command == "H") goBackLeft();
  else if (command == "S") stopRobot();  // Stop
  else if (command >= "0" && command <= "9")
    speedCar = 400 + (command.toInt() * 70);  // Adjust speed based on number key
}

// Handle root and unknown URLs
void HTTP_handleRoot(void) {
  if (server.hasArg("State")) {
    Serial.println(server.arg("State"));  // Print command for debugging
  }
  server.send(200, "text/html", "");  // Respond with empty HTML
  delay(1);  // Short delay to stabilize communication
}
